// This file was auto-generated by ML.NET Model Builder.

using Microsoft.ML.Trainers.FastTree;
using Microsoft.ML;

namespace RacePredictor.Core.ML;

public partial class RacePredictor
{
    public const string RetrainFilePath = @"C:\Dev\Personal\RacingData\Data\Clean_Race_Features.csv";
    public const char RetrainSeparatorChar = ',';
    public const bool RetrainHasHeader = true;

    /// <summary>
    /// Train a new model with the provided dataset.
    /// </summary>
    /// <param name="outputModelPath">File path for saving the model. Should be similar to "C:\YourPath\ModelName.mlnet"</param>
    /// <param name="inputDataFilePath">Path to the data file for training.</param>
    /// <param name="separatorChar">Separator character for delimited training file.</param>
    /// <param name="hasHeader">Boolean if training file has a header.</param>
    public static void Train(string outputModelPath, string inputDataFilePath = RetrainFilePath, char separatorChar = RetrainSeparatorChar, bool hasHeader = RetrainHasHeader)
    {
        var mlContext = new MLContext();

        var data = LoadIDataViewFromFile(mlContext, inputDataFilePath, separatorChar, hasHeader);
        var model = RetrainModel(mlContext, data);
        SaveModel(mlContext, model, data, outputModelPath);
    }

    /// <summary>
    /// Load an IDataView from a file path.
    /// </summary>
    /// <param name="mlContext">The common context for all ML.NET operations.</param>
    /// <param name="inputDataFilePath">Path to the data file for training.</param>
    /// <param name="separatorChar">Separator character for delimited training file.</param>
    /// <param name="hasHeader">Boolean if training file has a header.</param>
    /// <returns>IDataView with loaded training data.</returns>
    public static IDataView LoadIDataViewFromFile(MLContext mlContext, string inputDataFilePath, char separatorChar, bool hasHeader) =>
        mlContext.Data.LoadFromTextFile<ModelInput>(inputDataFilePath, separatorChar, hasHeader);


    /// <summary>
    /// Save a model at the specified path.
    /// </summary>
    /// <param name="mlContext">The common context for all ML.NET operations.</param>
    /// <param name="model">Model to save.</param>
    /// <param name="data">IDataView used to train the model.</param>
    /// <param name="modelSavePath">File path for saving the model. Should be similar to "C:\YourPath\ModelName.mlnet.</param>
    public static void SaveModel(MLContext mlContext, ITransformer model, IDataView data, string modelSavePath)
    {
        // Pull the data schema from the IDataView used for training the model
        var dataViewSchema = data.Schema;

        using (var fs = File.Create(modelSavePath))
        {
            mlContext.Model.Save(model, dataViewSchema, fs);
        }
    }


    /// <summary>
    /// Retrain model using the pipeline generated as part of the training process.
    /// </summary>
    /// <param name="mlContext"></param>
    /// <param name="trainData"></param>
    /// <returns></returns>
    public static ITransformer RetrainModel(MLContext mlContext, IDataView trainData)
    {
        var pipeline = BuildPipeline(mlContext);
        var model = pipeline.Fit(trainData);

        return model;
    }

    /// <summary>
    /// build the pipeline that is used from model builder. Use this function to retrain model.
    /// </summary>
    /// <param name="mlContext"></param>
    /// <returns></returns>
    public static IEstimator<ITransformer> BuildPipeline(MLContext mlContext)
    {
        // Data process configuration with pipeline data transformations
        var pipeline =
            mlContext.Transforms.ReplaceMissingValues(new[]
                {
                    new InputOutputColumnPair(@"DistanceInMeters", @"DistanceInMeters"),
                    new InputOutputColumnPair(@"WeightInPounds", @"WeightInPounds"),
                    new InputOutputColumnPair(@"Surface_AllWeather", @"Surface_AllWeather"),
                    new InputOutputColumnPair(@"Surface_Dirt", @"Surface_Dirt"),
                    new InputOutputColumnPair(@"Surface_Turf", @"Surface_Turf"),
                    new InputOutputColumnPair(@"Going_Firm", @"Going_Firm"),
                    new InputOutputColumnPair(@"Going_Good", @"Going_Good"),
                    new InputOutputColumnPair(@"Going_Good_To_Firm", @"Going_Good_To_Firm"),
                    new InputOutputColumnPair(@"Going_Good_To_Soft", @"Going_Good_To_Soft"),
                    new InputOutputColumnPair(@"Going_Heavy", @"Going_Heavy"),
                    new InputOutputColumnPair(@"Going_Soft", @"Going_Soft"),
                    new InputOutputColumnPair(@"RaceType_Flat", @"RaceType_Flat"),
                    new InputOutputColumnPair(@"RaceType_Hurdle", @"RaceType_Hurdle"),
                    new InputOutputColumnPair(@"RaceType_Other", @"RaceType_Other"),
                    new InputOutputColumnPair(@"RaceType_SteepleChase", @"RaceType_SteepleChase"),
                    new InputOutputColumnPair(@"LastRaceDistanceInMeters", @"LastRaceDistanceInMeters"),
                    new InputOutputColumnPair(@"LastRaceWeightInPounds", @"LastRaceWeightInPounds"),
                    new InputOutputColumnPair(@"LastRaceSpeed", @"LastRaceSpeed"),
                    new InputOutputColumnPair(@"DaysRested", @"DaysRested"),
                    new InputOutputColumnPair(@"LastRaceAvgRelFinishingPosition", @"LastRaceAvgRelFinishingPosition"),
                    new InputOutputColumnPair(@"LastRaceSurface_AllWeather", @"LastRaceSurface_AllWeather"),
                    new InputOutputColumnPair(@"LastRaceSurface_Dirt", @"LastRaceSurface_Dirt"),
                    new InputOutputColumnPair(@"LastRaceSurface_Turf", @"LastRaceSurface_Turf"),
                    new InputOutputColumnPair(@"LastRaceGoing_Good", @"LastRaceGoing_Good"),
                    new InputOutputColumnPair(@"LastRaceGoing_Good_To_Soft", @"LastRaceGoing_Good_To_Soft"),
                    new InputOutputColumnPair(@"LastRaceGoing_Soft", @"LastRaceGoing_Soft"),
                    new InputOutputColumnPair(@"LastRaceGoing_Good_To_Firm", @"LastRaceGoing_Good_To_Firm"),
                    new InputOutputColumnPair(@"LastRaceGoing_Firm", @"LastRaceGoing_Firm"),
                    new InputOutputColumnPair(@"LastRaceGoing_Heavy", @"LastRaceGoing_Heavy"),
                    new InputOutputColumnPair(@"LastRaceRaceType_Other", @"LastRaceRaceType_Other"),
                    new InputOutputColumnPair(@"LastRaceRaceType_Hurdle", @"LastRaceRaceType_Hurdle"),
                    new InputOutputColumnPair(@"LastRaceRaceType_SteepleChase", @"LastRaceRaceType_SteepleChase"),
                    new InputOutputColumnPair(@"LastRaceRaceType_Flat", @"LastRaceRaceType_Flat"),
                    new InputOutputColumnPair(@"JockeyNumberOfPriorRaces", @"JockeyNumberOfPriorRaces"),
                    new InputOutputColumnPair(@"DaysSinceJockeyLastRaced", @"DaysSinceJockeyLastRaced"),
                    new InputOutputColumnPair(@"JockeyWinPercentage", @"JockeyWinPercentage"),
                    new InputOutputColumnPair(@"JockeyTop3Percentage", @"JockeyTop3Percentage"),
                    new InputOutputColumnPair(@"JockeyAvgRelFinishingPosition", @"JockeyAvgRelFinishingPosition")
                })
            .Append(mlContext.Transforms.Concatenate(
                @"Features",
                new[]
                {
                    @"DistanceInMeters",
                    @"WeightInPounds",
                    @"Surface_AllWeather",
                    @"Surface_Dirt",
                    @"Surface_Turf",
                    @"Going_Firm",
                    @"Going_Good",
                    @"Going_Good_To_Firm",
                    @"Going_Good_To_Soft",
                    @"Going_Heavy",
                    @"Going_Soft",
                    @"RaceType_Flat",
                    @"RaceType_Hurdle",
                    @"RaceType_Other",
                    @"RaceType_SteepleChase",
                    @"LastRaceDistanceInMeters",
                    @"LastRaceWeightInPounds",
                    @"LastRaceSpeed",
                    @"DaysRested",
                    @"LastRaceAvgRelFinishingPosition",
                    @"LastRaceSurface_AllWeather",
                    @"LastRaceSurface_Dirt",
                    @"LastRaceSurface_Turf",
                    @"LastRaceGoing_Good",
                    @"LastRaceGoing_Good_To_Soft",
                    @"LastRaceGoing_Soft",
                    @"LastRaceGoing_Good_To_Firm",
                    @"LastRaceGoing_Firm",
                    @"LastRaceGoing_Heavy",
                    @"LastRaceRaceType_Other",
                    @"LastRaceRaceType_Hurdle",
                    @"LastRaceRaceType_SteepleChase",
                    @"LastRaceRaceType_Flat",
                    @"JockeyNumberOfPriorRaces",
                    @"DaysSinceJockeyLastRaced",
                    @"JockeyWinPercentage",
                    @"JockeyTop3Percentage",
                    @"JockeyAvgRelFinishingPosition"
                }))
            .Append(mlContext.Regression.Trainers.FastForest(
                new FastForestRegressionTrainer.Options
                {
                    NumberOfTrees = 2041,
                    NumberOfLeaves = 18,
                    FeatureFraction = 0.7613674F,
                    LabelColumnName = @"Speed",
                    FeatureColumnName = @"Features"
                }));

        return pipeline;
    }
}
